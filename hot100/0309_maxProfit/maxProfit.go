package maxprofit

// 持有股票和不持股票是互斥的
// 持有股票和处于冷冻期是互斥的
// 不持有股票和是否处于冷冻期可以两两组合
// 因此有三种状态：
//  持有股票、不持有有股票且处于冷冻期、不持有股票且不处于冷冻期
// （1）【持有股票】的状态可由前一天的【持有股票】转移而来，操作是不进行操作；
//      也可以由前一天的【不持有股票且不处于冷冻期】转移而来，操作是买入
// （2）【不持有有股票且处于冷冻期】的状态只能由前一天持有股票转移而来，操作是卖出
// （3）【不持有股票且不处于冷冻期】的状态可以由前一天的【不持有股票且处于冷冻期】转移而来，操作是不操作；
//      也可以由前一天的【不持有股票且不处于冷冻期】转移而来，操作是不操作。
func maxProfit(prices []int) int {
	if len(prices) == 1 {
		return 0
	}
	n := len(prices)
	// 定义dp数组，dp[i][j]代表第i天处于状态j的累计最大收益
	// dp[i][0]: 第i天持有股票的累计最大收益
	// dp[i][1]: 第i天不持有股票且处于冷冻期的累计最大收益
	// dp[i][2]: 第i天不持有股票且不处于冷冻期的累计最大收益
	dp := make([][3]int, n)
	dp[0][0] = -prices[0]
	for i := 1; i < n; i++ {
		dp[i][0] = max(dp[i-1][0], dp[i-1][2]-prices[i])
		dp[i][1] = dp[i-1][0] + prices[i]
		dp[i][2] = max(dp[i-1][2], dp[i-1][1])
	}
	return max(dp[n-1][1], dp[n-1][2])
}

func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}
